// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id        String @id @default(uuid())
  name      String
  username  String @unique
  email     String @unique
  password  String

  projects  Project[]
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
}

model Project{
  id              String @id @default(uuid())
  name            String 
  description     String? @db.Text 
  startDate       DateTime  @db.Date @map("start_date")
  endDate         DateTime @db.Date @map("end_date")
  status          StatusProject? @default(ongoing)
  priority        Priority? @default(low)
  createdAt       DateTime @default(now())  @map("created_at")
  updatedAt       DateTime @updatedAt  @map("updated_at")

  tasks Task[]
  invites Invite[]
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}


model Task{
  id Int @id @default(autoincrement())
  name String
  description String? @db.Text
  due_date DateTime @db.Date
  status StatusTask
  priority Priority
  createdAt       DateTime @default(now())  @map("created_at")
  updatedAt       DateTime @updatedAt  @map("updated_at")
  //usuario ao qual a task pertence
  userId String
  user User @relation(fields: [userId], references: [id])
  //projeto ao qual a task pertence
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)   


  @@map("tasks")
}

model Invite {
  id          String    @id @default(uuid())
  email       String    // E-mail do usuário convidado
  token       String   @db.Text// Token único para validação
  status      InviteStatus @default(Pending) // Status do convite
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expiresAt   DateTime? // (Opcional) Data de expiração do convite

  // Relacionamento com o modelo `Project`
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("invites")
}

enum InviteStatus {
  Pending
  Accepted
  Rejected
  Expired
}


enum StatusTask {
  Pending
  In_progres
  completed
}

enum StatusProject {
  ongoing
  completed
  cancelled
}


enum Priority {
  low
  medium
  high
}